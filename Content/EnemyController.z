class EnemyController : ZilchComponent
{
 
[Property]
var PaceSpeed: Real = 5.0;
[Property]
var MaxMoveDistance: Real = 10.0;
var PaceDirection: Real3 = Real3(0.0, 1.0, 0.0);
var StartPosition: Real3 = Real3();
[Property]
var ShootDelay: Real = 1.0;
var NextShot: Real = 0.0;
[Property]
var TargetObject: CogPath = null;
 [Property]
var ChaseSpeed: Real = 5.0;
var ChaseTriggerDistance: Real = 100.0;
var DistanceFromTarget: Real = 0.0;
var ChaseDirection: Real3 = Real3();
var ChaseColor:Real4 = Real4(1.0, 0.0, 0.0, 1.0);
var TargetIsWithinRange: Boolean = false;


var OriginalColor: Real4 = Real4();


[Dependency]
var Transform: Transform = null;
[Dependency]
var Sprite: Sprite = null;

function ShootAtTarget(event: UpdateEvent)
{
    if (event.TimePassed > this.NextShot)
  {
      
      this.NextShot = event.TimePassed + this.ShootDelay;
     
      var projectileObject = this.Space.CreateAtPosition(Archetype.Find("EnemyProjectile"), this.Owner.Transform.Translation);
      if (projectileObject != null)
      {
         
          projectileObject.Projectile.Direction = this.ChaseDirection;
         
          projectileObject.Projectile.Speed = 15.0 + this.ChaseSpeed;
      }
  }
}

 function ChaseTarget(event: UpdateEvent)
  {
      
      this.Owner.Sprite.Color = this.ChaseColor;

      
      this.Owner.Transform.Translation += this.ChaseDirection * event.Dt * this.ChaseSpeed;
  }


function CalculateChaseDirectionAndDistance()
{
    
    this.ChaseDirection = this.TargetObject.Cog.Transform.Translation - this.Owner.Transform.Translation;
    
    this.DistanceFromTarget = Math.Length(this.ChaseDirection);
   
    this.ChaseDirection = Math.Normalize(this.ChaseDirection);
}
    function Initialize(init : CogInitializer)
    {
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
         this.StartPosition = this.Owner.Transform.Translation;
           this.OriginalColor = this.Owner.Sprite.Color;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.TargetIsWithinRange = false;


if (this.TargetObject.Cog != null)
{
    
    this.CalculateChaseDirectionAndDistance();
    
    this.TargetIsWithinRange = (this.DistanceFromTarget <= this.ChaseTriggerDistance);

    if (this.TargetIsWithinRange)
    {
      
      this.ChaseTarget(event);
      this.ShootAtTarget(event);
    }
    else 
    {
        
        this.PaceBackAndForth(event);
    }
}
else 
{
    
    this.PaceBackAndForth(event);
}
        
        this.PaceBackAndForth(event);
    }

    function PaceBackAndForth(event: UpdateEvent)
    {
       
       var displacement = this.Owner.Transform.Translation - this.StartPosition;
  var distanceFromStart = Math.Length(displacement);

 
  if (distanceFromStart >= this.MaxMoveDistance)
  {

      this.PaceDirection = -displacement;
  }


  this.PaceDirection = Math.Normalize(this.PaceDirection);


  this.Owner.Transform.Translation += this.PaceDirection * event.Dt * this.PaceSpeed;
       
        this.Owner.Transform.Translation += this.PaceDirection * event.Dt * this.PaceSpeed;
    }
}